# -*- mode: ruby -*-
# vi: set ft=ruby :

IMAGE_NAMESPACE = ENV['IMAGE_NAMESPACE'] || "puppet"

Vagrant.configure(2) do |config|
  config.vm.box = "vmware/photon"
  config.vm.synced_folder ".", "/vagrant", disabled: true

  if Vagrant.has_plugin?("vagrant-vbguest") then
    config.vbguest.auto_update = false
  end

  config.vm.provider "virtualbox" do |vb|
    vb.memory = "1024"
    vb.check_guest_additions = false
    vb.functional_vboxsf = false
		vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
  end

  config.vm.provider "vmware_fusion" do |v|
    v.vmx["memsize"] = "1024"
  end

  # Photon doesn't start Docker by default, so lets enable it
  # and then ensure it's started on the first run
  config.vm.provision "shell", inline: <<-SHELL
    sudo systemctl enable docker
    sudo systemctl start docker
  SHELL

  # This provisioner starts up a local Puppet Server instance
  # from the Puppet-in-Docker container.
  config.vm.provision "docker", images: [
    "#{IMAGE_NAMESPACE}/puppet-agent",
    "#{IMAGE_NAMESPACE}/facter",
    "#{IMAGE_NAMESPACE}/puppetserver-standalone",
  ] do |d|
    d.run "puppet",
      image: "#{IMAGE_NAMESPACE}/puppetserver-standalone",
      args: "--hostname puppet"
  end

  # wait for puppetserver to boot
  config.vm.provision "shell", inline: <<-SHELL
    sleep 70
  SHELL

  # These flags allow Puppet on the Docker container to manage the host OS
  # So information is read from the OS DBUS for services and from other file
  # locations for packages and files
  docker_flags = {
    "FLAGS" => "--rm --privileged --hostname agent -v /tmp:/tmp -v /etc:/etc -v /var:/var -v /usr:/usr -v /var/run/dbus:/var/run/dbus -v /run/systemd:/run/systemd"
  }

  # Puppet-in-Docker also supports facter for querying state about the system
  # In this case, by mounting directories from the host, we are able to access
  # facts about the host operating system not the container.
  #
  # You can run Facter from the vagrant interface using the following command:
  # vagrant provision --provision-with facter
  config.vm.provision "facter", type: "shell", env: docker_flags, inline: <<-SHELL
    docker run $FLAGS --net host #{IMAGE_NAMESPACE}/facter
  SHELL

  # This provisioner runs Puppet from within a Puppet-in-Docker container
  # but by mounting the directories from the host can affect the
  # Photon host itself. We're linking this container to the above launched
  # Puppet Server for the sake of this demo. In a cluster environment you would
  # probably point at an external Puppet Server or Puppet Enterprise installation.
  #
  # You can rerun Puppet from the vagrant interface using the following command:
  # vagrant provision --provision-with puppet
  config.vm.provision "puppet", type: "shell", env: docker_flags, inline: <<-SHELL
    docker run $FLAGS --link puppet:puppet #{IMAGE_NAMESPACE}/puppet-agent
  SHELL

  config.vm.provision "file", source: "manifests", destination: "/tmp/puppet"

  # Here we run some existing Puppet code, by mounting the code uploaded to the host
  # into the container and then running it. The manifests in question install, configure
  # and run the nginx webserver on port 80
  config.vm.provision "nginx", type: "shell", env: docker_flags, inline: <<-SHELL
    docker run $FLAGS -v /tmp/puppet:/var/puppet puppet/puppet-agent apply /var/puppet/manifests/init.pp --verbose
  SHELL
end
