# -*- mode: ruby -*-
# vi: set ft=ruby :

IMAGE_NAMESPACE = ENV['IMAGE_NAMESPACE'] || "puppet"

Vagrant.configure(2) do |config|
  config.vm.box = "vmware/photon"
  # config.vm.synced_folder "../data", "/vagrant_data"

  config.vm.provider "virtualbox" do |vb|
    vb.memory = "1024"
  end

  config.vm.provider "vmware_fusion" do |v|
    v.vmx["memsize"] = "1024"
  end

  # Photon doesn't start Docker by default, so lets enable it
  # and then ensure it's started on the first run
  config.vm.provision "shell", inline: <<-SHELL
    sudo systemctl enable docker
    sudo systemctl start docker
  SHELL

  # This provisioner starts up a local Puppet Server instance
  # from the Puppet-in-Docker container.
  config.vm.provision "docker", images: [
    "#{IMAGE_NAMESPACE}/puppet-agent-ubuntu",
    "#{IMAGE_NAMESPACE}/facter",
    "#{IMAGE_NAMESPACE}/puppetserver",
  ] do |d|
    d.run "puppet",
      image: "#{IMAGE_NAMESPACE}/puppetserver-standalone",
      args: "--net host --hostname puppet"
  end

  # Puppet-in-Docker also supports facter for querying state about the system
  # In this case, by mounting directories from the host, we are able to access
  # facts about the host operating system not the container.
  #
  # You can run Facter from the vagrant interface using the following command:
  # vagrant provision --provision-with facter
  config.vm.provision "facter", type: "docker" do |f|
    f.run "facter",
      image: "#{IMAGE_NAMESPACE}/facter",
      args: "--rm --privileged -v /tmp:/tmp --net host -v /etc:/etc -v /var:/var -v /usr:/usr -v /lib64:/lib64",
      daemonize: false
  end

  # This provisioner runs Puppet from within a Puppet-in-Docker container
  # but by mounting the directories from the host can affect the
  # Photon host itself. We're linking this container to the above launched
  # Puppet Server for the sake of this demo. In a cluster environment you would
  # probably point at an external Puppet Server or Puppet Enterprise installation.
  #
  # You can rerun Puppet from the vagrant interface using the following command:
  # vagrant provision --provision-with puppet
  config.vm.provision "puppet", type: "docker" do |p|
    p.run "agent",
      image: "#{IMAGE_NAMESPACE}/puppet-agent-ubuntu",
      args: "--rm --privileged -v /tmp:/tmp --net host -v /etc:/etc -v /var:/var -v /usr:/usr -v /lib64:/lib64 --link puppet:puppet",
      daemonize: false
  end
end
